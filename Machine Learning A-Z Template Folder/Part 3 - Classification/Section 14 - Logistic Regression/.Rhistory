setwd("E:/CompSci/Machine Learning(Udemy)/Udemy(Machine Learning)/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset=read.csv('50_Startups.csv')
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset$State=factor(dataset$State,
levels=c('New York','California','Florida'),
labels=c(1,2,3))
library(caTools)
set.seed(123)
split=sample.split(dataset$Profit,SplitRatio = 0.8)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
regressor = lm(formula = Profit ~ .,data = training_set)
summary(regressor)
y_pred = predict(regressor,newdata = test_set)
y_pred
View(dataset)
View(dataset)
View(test_set)
View(test_set)
View(dataset)
View(dataset)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend ,data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration  ,data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration  ,data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend  ,data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend+ Marketing.Spend ,data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend  ,data = dataset)
summary(regressor)
View(dataset)
setwd("E:/CompSci/Machine Learning(Udemy)/Udemy(Machine Learning)/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 5 - Multiple Linear Regression")
dataset=read.csv('Position_Salaries.csv')
setwd("E:/CompSci/Machine Learning(Udemy)/Udemy(Machine Learning)/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset=read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
setwd("E:/CompSci/Machine Learning(Udemy)/Udemy(Machine Learning)/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset=read.csv('Position_Salaries.csv')
View(dataset)
dataset=dataset[,2:3]
View(dataset)
View(dataset)
lin_reg=lm(formula = Salary ~ .,data = dataset)
summary(lin_reg)
dataset$Level2=dataset$Level^2
dataset$Level2=dataset$Level^2
dataset$Level3=dataset$Level^3
poly_reg = lm(formula = Salary ~ .,data = dataset)
summary(poly_reg)
library(ggplot2)
library(ggplot2)
library(ggplot2)
library(ggplot2)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=dataset$Level,y=predict(lin_reg,newdata = dataset)),
colour='blue')+
ggtitle('Truth or Bluff (Linear Regression)')+
xlab('Level') +
ylab('Salary')
library(ggplot2)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=dataset$Level,y=predict(poly_reg,newdata = dataset)),
colour='blue')+
ggtitle('Truth or Bluff (Polynomial Regression)')+
xlab('Level') +
ylab('Salary')
dataset$Level4=dataset$Level^4
poly_reg = lm(formula = Salary ~ .,data = dataset)
library(ggplot2)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=dataset$Level,y=predict(poly_reg,newdata = dataset)),
colour='blue')+
ggtitle('Truth or Bluff (Polynomial Regression)')+
xlab('Level') +
ylab('Salary')
View(dataset)
View(dataset)
y_pred = predict(lin_reg,data.frame(Level = 6.5))
y_pred
y_pred = predict(poly_reg,data.frame(Level = 6.5,Level2 = 6.5^2,Level3 = 6.5^3,Level4 = 6.5^4))
y_pred
setwd("E:/CompSci/Machine Learning(Udemy)/Udemy(Machine Learning)/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)")
install.packages('e1071')
dataset=read.csv('Position_Salaries.csv')
dataset=dataset[,2:3]
library(e1071)
regressor =svm(formula=Salary ~ .,data=dataset,type='eps~regression')
regressor =svm(formula=Salary ~ .,data=dataset,type='eps-regression')
y_pred = predict(regressor,data.frame(Level = 6.5))
y_pred
library(ggplot2)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=dataset$Level,y=predict(regressor,newdata = dataset)),
colour='blue')+
ggtitle('Truth or Bluff (Polynomial Regression)')+
xlab('Level') +
ylab('Salary')
setwd("E:/CompSci/Machine Learning(Udemy)/Udemy(Machine Learning)/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 8 - Decision Tree Regression")
install.packages('rpart')
dataset=read.csv('Position_Salaries.csv')
dataset=dataset[,2:3]
library(rpart)
regressor =rpart(formula = Salary ~ .,data = dataset)
y_pred = predict(regressor,data.frame(Level = 6.5))
library(ggplot2)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=dataset$Level,y=predict(regressor,newdata = dataset)),
colour='blue')+
ggtitle('Truth or Bluff (Polynomial Regression)')+
xlab('Level') +
ylab('Salary')
library(rpart)
regressor =rpart(formula = Salary ~ .,data = dataset,control = rpart.control(minsplit = 1))
y_pred = predict(regressor,data.frame(Level = 6.5))
library(ggplot2)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=dataset$Level,y=predict(regressor,newdata = dataset)),
colour='blue')+
ggtitle('Truth or Bluff (Polynomial Regression)')+
xlab('Level') +
ylab('Salary')
x_grid=seq(min(dataset$Level),max(dataset$Level),0.1)
library(ggplot2)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=dataset$Level,y=predict(regressor,newdata = data.frame(Level=x_grid))),
colour='blue')+
ggtitle('Truth or Bluff Decision Tree Regression')+
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid=seq(min(dataset$Level),max(dataset$Level),0.1)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level=x_grid))),
colour='blue')+
ggtitle('Truth or Bluff Decision Tree Regression')+
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid=seq(min(dataset$Level),max(dataset$Level),0.01)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level=x_grid))),
colour='blue')+
ggtitle('Truth or Bluff Decision Tree Regression')+
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor,data.frame(Level = 6.5))
setwd("E:/CompSci/Machine Learning(Udemy)/Udemy(Machine Learning)/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression")
install.packages('randomForest')
dataset=read.csv('Position_Salaries.csv')
dataset=dataset[,2:3]
set.seed(1234)
regressor = randomForest(X=dataset[1],
Y=dataset$Salary,ntree =10)# Vector
library(randomForest)
set.seed(1234)
regressor = randomForest(X=dataset[1],
Y=dataset$Salary,ntree =10)# Vector
set.seed(1234)
regressor = randomForest(X=dataset[1],
Y=dataset$Salary,ntree =10)# Vector
library(randomForest)
set.seed(1234)
regressor = randomForest(x=dataset[1],
y=dataset$Salary,ntree =10)# Vector
library(ggplot2)
x_grid=seq(min(dataset$Level),max(dataset$Level),0.01)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level=x_grid))),
colour='blue')+
ggtitle('Truth or Bluff Decision Tree Regression')+
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor,data.frame(Level = 6.5))
library(ggplot2)
x_grid=seq(min(dataset$Level),max(dataset$Level),0.01)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level=x_grid))),
colour='blue')+
ggtitle('Truth or Bluff Decision Tree Regression')+
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor,data.frame(Level = 6.5))
y_pred = predict(regressor,data.frame(Level = 6.5))
y_pred = predict(regressor,data.frame(Level = 6.5))
y_pred = predict(regressor,data.frame(Level = 6.5))
y_pred = predict(regressor,data.frame(Level = 6.5))
y_pred
library(randomForest)
set.seed(1234)
regressor = randomForest(x=dataset[1],
y=dataset$Salary,ntree =100)# Vector
y_pred = predict(regressor,data.frame(Level = 6.5))
y_pred
library(randomForest)
set.seed(1234)
regressor = randomForest(x=dataset[1],
y=dataset$Salary,ntree =500)# Vector
library(ggplot2)
x_grid=seq(min(dataset$Level),max(dataset$Level),0.01)
ggplot()+
geom_point(aes(x=dataset$Level,y=dataset$Salary),
colour='red')+
geom_line(aes(x=x_grid,y=predict(regressor,newdata = data.frame(Level=x_grid))),
colour='blue')+
ggtitle('Truth or Bluff Decision Tree Regression')+
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor,data.frame(Level = 6.5))
setwd("E:/CompSci/Machine Learning(Udemy)/Udemy(Machine Learning)/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression")
dataset=read.csv('Social_Network_Ads.csv')
View(dataset)
View(dataset)
dataset=dataset[,3:5]
View(dataset)
View(dataset)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
View(training_set)
View(training_set)
View(test_set)
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
View(test_set)
View(training_set)
classifier = glm(formula = Purchased ~.,
family = binomial,
data = training_set
)
classifier
prob_pred= predict(classifier, type = 'response' ,newdata = test_set[-3])
prob_pred
y_pred = ifelse( prob_pred >0.5 ,1,0 )
y_pred
dataset=read.csv('Social_Network_Ads.csv')
dataset=dataset[,3:5]
install.packages('caTools')
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
classifier = glm(formula = Purchased ~.,
family = binomial,
data = training_set
)
prob_pred= predict(classifier, type = 'response' ,newdata = test_set[-3])
y_pred = ifelse( prob_pred >0.5 ,1,0 )
y_pred
cm=table(test_set[,3],y_pred)
cm
install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# K nearest neighbours
#importing the dataset
dataset=read.csv('Social_Network_Ads.csv')
dataset=dataset[,3:5]
# Encoding categorical data
#dataset$State=factor(dataset$State,
#                    levels=c('New York','California','Florida'),
#                   labels=c(1,2,3))
#Spliting the dataset into the Training set and Test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased,SplitRatio = 0.75)
training_set=subset(dataset,split==TRUE)
test_set=subset(dataset,split==FALSE)
#Feature Scaling
training_set[,1:2]=scale(training_set[,1:2])
test_set[,1:2]=scale(test_set[,1:2])
library(class)
View(test_set)
View(test_set)
View(test_set)
View(test_set)
View(test_set)
library(class)
y_pred=knn(train =training_set[ ,-3] ,
test=test_set[,-3],cl = training_set[,3],k=5)
y_pred
cm = table(test_set[,3],y_pred)
cm
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
# prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = knn(train =training_set[ ,-3] ,
test=grid_set,cl = training_set[,3],k=5)
plot(set[, -3],
main = 'KNN (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
ibrary(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
# prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = knn(train =training_set[ ,-3] ,
test=grid_set,cl = training_set[,3],k=5)
plot(set[, -3],
main = 'KNN (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
# prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = knn(train =training_set[ ,-3] ,
test=grid_set,cl = training_set[,3],k=5)
plot(set[, -3],
main = 'KNN  (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
View(test_set)
install.packages('e1071')
install.packages("e1071")
install.packages('e1071')
install.packages("e1071")
install.packages('e1071')
